{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","CardLista","monsters","map","key","App","state","searchText","fetch","then","response","json","users","setState","this","filteredmonsters","filter","toLowerCase","includes","console","log","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mUAGaA,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,6BAAM,2BAAOC,UAAU,SAASC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,OCDzEI,G,YAAO,SAACC,GAAD,OAChB,yBAAKJ,UAAU,kBAGJ,yBAAKK,IAAI,UAAUC,IAAK,wBAAwBF,EAAMG,QAAQC,GAAG,cACvE,4BAAKJ,EAAMG,QAAQE,SCJfC,EAAY,SAAAN,GAAK,OAC9B,yBAAKJ,UAAU,aAEXI,EAAMO,SAASC,KAAI,SAAAL,GAAO,OACd,kBAAC,EAAD,CAAMM,IAAMN,EAAQC,GAAID,QAAUA,SCuCnCO,E,YAxCb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACVJ,SAAa,GACbK,WAAa,IAJL,E,iFAQZ,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACX,SAAWU,S,+BAG1C,IAAD,SACkCE,KAAKR,MAA7BJ,EADV,EACUA,SAAUK,EADpB,EACoBA,WACZQ,EAAmBb,EAASc,QAAO,SAAAlB,GAAO,OAC9CA,EAAQE,KAAKiB,cAAcC,SAASX,EAAWU,kBAGjD,OADEE,QAAQC,IAAOlB,EAAS,IAAIK,GAExB,yBAAKhB,UAAU,OAEX,4BAAI,yBAAKQ,GAAG,aAAR,kBAER,wDACA,2DACA,6GACA,kBAAC,EAAD,CAAWV,YAAa,kBAAkBC,aAAc,SAAA+B,GAAC,OAAI,EAAKR,SAAS,CAACN,WAAac,EAAEC,OAAOC,WAClG,kBAAC,EAAD,CAAWrB,SAAYa,S,GA/BfS,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.683e2b49.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) =>(\r\n    <div ><input className='search' type='search' placeholder={placeholder} onChange={handleChange}></input>\r\n</div>\r\n);\r\n","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n\r\n    \r\n               <img alt=\"monster\" src={\"https://robohash.org/\"+props.monster.id+\"?set=set2\"}/>\r\n         <h1>{props.monster.name}</h1>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardLista = props => (\r\n<div className='card-list'>\r\n{   \r\n    props.monsters.map(monster=> (\r\n                <Card key= {monster.id} monster= {monster}/>\r\n    ))}\r\n    </div>\r\n);","import React, {Component} from 'react';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport {CardLista} from './components/card-list/card-list.component';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n       monsters :   [],\n       searchText : ''\n    };\n  }\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}));\n  }\n  render()\n  { \n    const { monsters, searchText} = this.state;\n    const filteredmonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchText.toLowerCase())\n      );\n      console.log(\"\"+monsters+\" \"+searchText);\n    return(\n          <div className='App'>\n            \n              <h2><div id='app_title'>Monster Cards</div></h2>\n            \n          <h1>#100daysofcode Challange</h1>\n          <h2>Instagram @coding_aasan_hai</h2>\n          <h3>Disclaimer: Data is coming from an API response. Please expect some delay! :P</h3>\n          <SearchBox placeholder ='Search Monsters' handleChange={e => this.setState({searchText : e.target.value})} />\n          <CardLista monsters = {filteredmonsters}>\n           \n          </CardLista>\n                     \n          </div>\n       \n    );\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Appl from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Appl />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}